#!/usr/bin/env bash
#
# SPDX-License-Identifier: MIT
# Copyright (C) 2023 Utsav Balar
#

# shellcheck disable=SC1090
source "${KERNEL_DIR}"/vicharak/utils

# Check bootimage size and exit if it is less than 50MB
function check_image_build() {
	if [ -f "${FILENAME}" ] && [ "$(stat -c%s "${FILENAME}")" -lt 50000000 ]; then
		exit_with_error "Boot image size is less than 50MB"
	else
		print "----------------------------------------------------------------"
		print "Build successful!"
		print "----------------------------------------------------------------"
	fi
}

# Pack Image into boot image using extlinux config
# and copy kernel image and dtb file to boot image
function pack_image() {
	delete_file "${FILENAME}"

	if ! is_set "${DEVICE_KERNEL_IMAGE_FILE_SIZE}"; then
		DEVICE_KERNEL_IMAGE_FILE_SIZE=50
	fi

	mkfs.fat -n "boot" -C "${FILENAME}" $((KERNEL_IMAGE_SIZE * 1024))

	local extlinux_dir
	extlinux_dir=$(mktemp -d)

	echo "label Vicharak Linux Kernel" >"${extlinux_dir}"/extlinux.conf
	# shellcheck disable=SC2129
	echo "kernel /Image-${KERNEL_VERSION}" >>"${extlinux_dir}"/extlinux.conf
	echo "fdt /${DEVICE_DTB_FILE}.dtb" >>"${extlinux_dir}"/extlinux.conf
	echo "append earlycon=uart8250,mmio32,0xff1a0000 swiotlb=65536 coherent_pool=1m earlyprintk console=ttyS2,1500000n8 rw root=PARTUUID=614e0000-0000-4b53-8000-1d28000054a9 rootfstype=ext4 init=/sbin/init rootwait audit=0 splash" >>"${extlinux_dir}"/extlinux.conf

	cd "${OUT_DIR}" || exit

	if ! command -v mcopy &>/dev/null; then
		exit_with_error "mtools not found!, install mtools to continue"
	fi

	mmd -i "${FILENAME}" ::/extlinux
	mcopy -i "${FILENAME}" -s "${extlinux_dir}/extlinux.conf" ::/extlinux/extlinux.conf
	mcopy -i "${FILENAME}" -s "${KERNEL_IMAGE}" ::/Image-"${KERNEL_VERSION}"
	mcopy -i "${FILENAME}" -s "${KERNEL_DIR}"/logo.bmp ::
	mcopy -i "${FILENAME}" -s "${KERNEL_DIR}"/logo_kernel.bmp ::

	if [ -d "${DEVICE_DTB_DIR}"/overlays ]; then
		mmd -i "${FILENAME}" ::/overlays

		for dtbo in "${DEVICE_DTB_DIR}"/overlays/*; do
			mcopy -i "${FILENAME}" -s "${dtbo}" ::/overlays
		done
	fi

	mcopy -i "${FILENAME}" -s "${DEVICE_DTB_DIR}"/"${DEVICE_DTB_FILE}".dtb ::

	delete_dir "${extlinux_dir}"

	check_image_build

	cd "${KERNEL_DIR}" || exit
}

# Cleanup previous build files if any
function cleanup() {
	source_toolchain

	delete_file "${FILENAME}"
	delete_file "${DEVICE_KERNEL_IMAGE_FILE}"
	delete_file "${DEVICE_DTB_FILE}"
	delete_dir "${OUT_DIR}"/extlinux
	delete_dir "${OUT_DIR}"/modules_"${DEVICE_NAME}"

	print "Args : ${args}"

	# shellcheck disable=SC2086
	make ${args} clean && make ${args} mrproper
}

# Check if the GLIBC version is greater than 2.33
# This is required to use latest GCC and Clang compilers
function new_system_glibc() {
	local glibc_version
	glibc_version=$(ldd --version | awk '/ldd/{print $NF}' | sed 's/\.//g')

	# check if GLIBC version is greater than 2.33
	if [ "${glibc_version}" -gt 233 ]; then
		return 0
	else
		return 1
	fi
}

function get_clang_toolchain() {
	local clang_dir
	clang_dir=${KERNEL_DIR}/../clang
	local clang_version
	clang_version=${1}

	if ! is_set "${clang_version}"; then
		exit_with_error "Clang version Not set!"
	fi

	if [ ! -d "${clang_dir}" ]; then
		mkdir -p "${clang_dir}"

		# check if prebuilt clang is installed
		print "Downloading clang: ${clang_version}"
		clang_file=$(mktemp)
		wget -O "${clang_file}" \
			https://gitlab.com/ThankYouMario/android_prebuilts_clang-standalone/-/archive/"${clang_version}"/android_prebuilts_clang-standalone-"${clang_version}".tar.gz \
			-q --show-progress --progress=bar:force 2>&1

		tar -xzf "${clang_file}" -C "${clang_dir}"
		mv "${clang_dir}"/android_prebuilts_clang-standalone-"${clang_version}"/* "${clang_dir}"

		delete_file "${clang_file}"
	else
		local local_clang_version
		if [ -f "${clang_dir}"/AndroidVersion.txt ]; then
			local_clang_version=$(sed '2,$d' "${clang_dir}"/AndroidVersion.txt | cut -d '.' -f 1)
		fi

		if [[ ${local_clang_version} -ne ${clang_version} ]] || [ -z "${local_clang_version}" ]; then
			delete_dir "${clang_dir}"

			get_clang_toolchain "${clang_version}"
		fi
	fi
}

# Set environment variables for clang
function build_clang() {
	local clang_dir
	clang_dir=${KERNEL_DIR}/../clang
	local clang_version
	clang_version=${DEFAULT_CLANG_VERSION}

	# check if clang is installed
	if command -v clang &>/dev/null; then
		local system_clang_version
		system_clang_version=$(clang --version | head -n1 | cut -d' ' -f3 | cut -d'.' -f1)

		if [[ ${system_clang_version} -lt ${DEFAULT_CLANG_VERSION} ]]; then
			get_clang_toolchain "${clang_version}"
		fi
	else
		# No clang toolchain found! download it
		get_clang_toolchain "${clang_version}"
	fi

	if [ -d "${clang_dir}" ]; then
		print "----------------------------------------------------------------"
		print "Using standalone clang: ${clang_version}"
		print "----------------------------------------------------------------"

		PATH="${clang_dir}"/bin:${PATH}
		LD_LIBRARY_PATH="${clang_dir}"/lib:${LD_LIBRARY_PATH}
		export PATH
	fi

	if ! is_set "${CROSS_COMPILE}" && [ "${DEVICE_ARCH}" == "arm64" ]; then
		export CROSS_COMPILE=aarch64-linux-gnu-
	fi

	args="ARCH=${DEVICE_ARCH} \
		O=${OUT_DIR} \
		LLVM=1 \
		LLVM_IAS=1 \
		-j$(nproc --all)"

	export args
}

# Set environment variables for gcc
function build_gcc() {
	if new_system_glibc; then
		if [ ! -d "${KERNEL_DIR}"/../gcc-"${DEVICE_ARCH}" ]; then

			if [ "${DEVICE_ARCH}" != "x86_64" ]; then
				print "Downloading baremetal gcc-${DEVICE_ARCH}"
				wget -q --show-progress --progress=dot -O /tmp/gcc-"${DEVICE_ARCH}".zip \
					https://github.com/mvaisakh/gcc-"${DEVICE_ARCH}"/archive/refs/heads/gcc-master.zip

				unzip -qq /tmp/gcc-"${DEVICE_ARCH}".zip -d "${KERNEL_DIR}"/../
				mv "${KERNEL_DIR}"/../gcc-"${DEVICE_ARCH}"-gcc-master "${KERNEL_DIR}"/../gcc-"${DEVICE_ARCH}"
				delete_file /tmp/gcc-"${DEVICE_ARCH}".zip

				export PATH="${KERNEL_DIR}"/../gcc-${DEVICE_ARCH}/bin:${PATH}
				export CROSS_COMPILE=aarch64-elf-
			fi
		fi
		if [ ! -d "${KERNEL_DIR}"/../gcc-arm ]; then
			if [ "${DEVICE_ARCH}" != "x86_64" ]; then
				print "Downloading baremetal gcc-arm"
				wget -q --show-progress --progress=dot -O /tmp/gcc-arm.zip \
					https://github.com/mvaisakh/gcc-arm/archive/refs/heads/gcc-master.zip

				unzip -qq /tmp/gcc-arm.zip -d "${KERNEL_DIR}"/../
				mv "${KERNEL_DIR}"/../gcc-arm-gcc-master "${KERNEL_DIR}"/../gcc-arm
				delete_file /tmp/gcc-arm.zip

				export PATH="${KERNEL_DIR}"/../gcc-arm/bin:${PATH}
				export CROSS_COMPILE_COMPAT=arm-eabi-
			fi
		fi

		if ! is_set ${CROSS_COMPILE} && [ "${DEVICE_ARCH}" == "arm64" ]; then
			export CROSS_COMPILE=aarch64-linux-gnu-
		fi

		args="ARCH=${DEVICE_ARCH} \
			O=${OUT_DIR} \
			-j$(nproc --all)"
	else
		print "----------------------------------------------------------------"
		print "Using System GCC"
		print "----------------------------------------------------------------"

		if ! is_set ${CROSS_COMPILE} && [ "${DEVICE_ARCH}" == "arm64" ]; then
			export CROSS_COMPILE=aarch64-linux-gnu-
		fi

		if command -v gcc-arm-linux-gnueabi &>/dev/null && [ "${DEVICE_ARCH}" == "arm64" ]; then
			export CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
		fi

		args="ARCH=${DEVICE_ARCH} \
			O=${OUT_DIR} \
			-j$(nproc --all)"
	fi

	export args
}

# Make performance defconfig with optional argument
# If argument is passed, merge it with defconfig
function build_config() {
	# shellcheck disable=SC2086
	make ${args} "${DEVICE_DEFCONFIG}"

	local arch
	if [ "${DEVICE_ARCH}" == "x86_64" ]; then
		arch="x86"
	else
		arch="${DEVICE_ARCH}"
	fi

	if [ ! -f "${KERNEL_DIR}/arch/${arch}/configs/${DEVICE_CONFIG_FRAGMENT}" ]; then
		print "----------------------------------------------------------------"
		print "${DEVICE_CONFIG_FRAGMENT} File not found!"
		print "----------------------------------------------------------------"
	else
		cat "${KERNEL_DIR}/arch/${arch}/configs/${DEVICE_CONFIG_FRAGMENT}" >>"${OUT_DIR}"/.config
	fi

	if is_enabled "${PERF_BUILD}"; then
		cat "${KERNEL_DIR}"/arch/"${arch}"/configs/rockchip_performance.config >>"${OUT_DIR}"/.config
	fi
}

# Make modules and gz compress them to modules_${DEVICE_NAME} directory
function build_modules() {
	# shellcheck disable=SC2086
	make modules_install ${args} INSTALL_MOD_PATH="${OUT_DIR}"/modules_"${DEVICE_NAME}"
	tar -czf "${OUT_DIR}"/modules_"${DEVICE_NAME}".tar.gz -C "${OUT_DIR}"/modules_"${DEVICE_NAME}" .
}

# Make kernel deb package
function build_kerneldeb() {
	source_toolchain
	build_config
	build_kernel_deb_package
}

# Build deb package for kernel
function build_kernel_deb_package() {
	local build_id
	local deb_files
	local build_device_name

	build_device_name=$(echo "${DEVICE_NAME}" | cut -d'_' -f2)
	build_id="$(date +%Y%m%d)-${build_device_name}"

	# shellcheck disable=SC2086
	make ${args} bindeb-pkg \
		KDEB_PKGVERSION="${build_id}" \
		RK_KERNEL_DTS="${DEVICE_DTB_FILE}" \
		LOCALVERSION="-${build_device_name}"

	deb_files=$(find "${KERNEL_DIR}" -maxdepth 1 -name "linux-*")

	if is_set "${deb_files}"; then
		for deb_file in ${deb_files}; do
			mv "${deb_file}" "${OUT_DIR}"/
		done
	else
		exit_with_error "Deb package build failed!"
	fi
}

# Build dtbs
function build_dtbs() {
	source_toolchain

	if [ ! -f "${OUT_DIR}"/.config ]; then
		build_config
	fi

	# shellcheck disable=SC2086
	make dtbs ${args}
}

# Set environment variables for clang or gcc
function source_toolchain() {
	if is_enabled "${CLANG_BUILD}"; then
		print "----------------------------------------------------------------"
		print "Building with Clang"
		print "----------------------------------------------------------------"
		build_clang
	else
		print "----------------------------------------------------------------"
		print "Building with GCC"
		print "----------------------------------------------------------------"
		build_gcc
	fi
}

# Make kernel image
function build_kernel() {
	source_toolchain

	build_config

	# shellcheck disable=SC2086
	make ${args} && make ${args} dtbs

	if is_enabled "${MODULES_BUILD}"; then
		build_modules
	fi

	if is_enabled "${DEB_BUILD}"; then
		build_kernel_deb_package
	fi

	if is_enabled "${PACK_KERNEL_BUILD}"; then
		pack_image
	fi
}

# Update defconfig with savedefconfig command
function update_defconfig() {
	if is_enabled "${CLANG_BUILD}"; then
		build_clang
	else
		build_gcc
	fi

	# shellcheck disable=SC2086
	make ${args} "${DEVICE_DEFCONFIG}"
	# shellcheck disable=SC2086
	make ${args} savedefconfig

	local arch
	if [ "${DEVICE_ARCH}" == "x86_64" ]; then
		arch="x86"
	else
		arch="${DEVICE_ARCH}"
	fi

	mv "${OUT_DIR}"/defconfig "${KERNEL_DIR}"/arch/"${arch}"/configs/"${DEVICE_DEFCONFIG}"
	print "----------------------------------------------------------------"
	print "Updated ${DEVICE_DEFCONFIG} with savedefconfig"
	print "----------------------------------------------------------------"
}

function print_info() {
	# shellcheck disable=SC1090,SC1091
	if [ -f "${CFG_DIR}/.device.mk" ]; then
		source "${CFG_DIR}/.device.mk"
	else
		lunch_device
	fi

	print "----------------------------------------------------------------"
	print "Device Building Information"
	print "----------------------------------------------------------------"

	if ! is_set "${DEVICE_DEFCONFIG}"; then
		DEVICE_MAKEFILE="${DEVICE_NAME}.mk"
	fi

	print "Device Makefile: ${DEVICE_MAKEFILE}"
	print "Device Name: ${DEVICE_NAME}"
	print "Device Defconfig: ${DEVICE_DEFCONFIG}"

	if is_set "${DEVICE_CONFIG_FRAGMENT}"; then
		print "Device Config Fragment: ${DEVICE_CONFIG_FRAGMENT}"
	fi

	if is_set "${DEVICE_DTB_FILE}"; then
		print "Device DTB: ${DEVICE_DTB_FILE}"
	fi

	if is_enabled "${CLANG_BUILD}"; then
		print "Device Compiler: Clang"
	else
		print "Device Compiler: GCC"
	fi

	if is_enabled "${PERF_BUILD}"; then
		print "Device Config: Performance config"
	fi

	if is_enabled "${MODULES_BUILD}"; then
		print "Build kernel modules: Yes"
	else
		print "Build Kernel Modules: No"
	fi

	if is_enabled "${DEB_BUILD}"; then
		print "Build Debian package: Yes"
	else
		print "Build Debian package: No"
	fi

	usage
}

function set_device_config() {
	print "----------------------------------------------------------------"
	cd "${CFG_DIR}" || exit 1
	printf "\e[1;32m"
	select device in *.mk; do
		DEVICE_MAKEFILE="${device}"
		break
	done
	cd "${KERNEL_DIR}" || exit 1
	printf "\e[0m"
	print "----------------------------------------------------------------"
}

function lunch_device() {
	delete_file "${CFG_DIR}/.device.mk"

	set_device_config

	cp "${CFG_DIR}/${DEVICE_MAKEFILE}" "${CFG_DIR}/.device.mk"

	# shellcheck disable=SC1090,SC1091
	source "${CFG_DIR}/.device.mk"

	if ! is_set "${DEVICE_DEFCONFIG}"; then
		print "----------------------------------------------------------------"
		print "Device defconfig not set!"
		print "----------------------------------------------------------------"
		exit 1
	fi
	source_toolchain
	build_config
}
